// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.1
// source: ems_grpc.proto

package IOSXRExtensibleManagabilityService

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CommitResult int32

const (
	CommitResult_CHANGE    CommitResult = 0
	CommitResult_NO_CHANGE CommitResult = 1
	CommitResult_FAIL      CommitResult = 2
)

// Enum value maps for CommitResult.
var (
	CommitResult_name = map[int32]string{
		0: "CHANGE",
		1: "NO_CHANGE",
		2: "FAIL",
	}
	CommitResult_value = map[string]int32{
		"CHANGE":    0,
		"NO_CHANGE": 1,
		"FAIL":      2,
	}
)

func (x CommitResult) Enum() *CommitResult {
	p := new(CommitResult)
	*p = x
	return p
}

func (x CommitResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommitResult) Descriptor() protoreflect.EnumDescriptor {
	return file_ems_grpc_proto_enumTypes[0].Descriptor()
}

func (CommitResult) Type() protoreflect.EnumType {
	return &file_ems_grpc_proto_enumTypes[0]
}

func (x CommitResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommitResult.Descriptor instead.
func (CommitResult) EnumDescriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{0}
}

type OC_RPC_RESPONSE_TYPE int32

const (
	OC_RPC_RESPONSE_TYPE_OK                      OC_RPC_RESPONSE_TYPE = 0
	OC_RPC_RESPONSE_TYPE_NOK                     OC_RPC_RESPONSE_TYPE = 1
	OC_RPC_RESPONSE_TYPE_UNSUPPORTED_PATH        OC_RPC_RESPONSE_TYPE = 2
	OC_RPC_RESPONSE_TYPE_INVALID_PATH            OC_RPC_RESPONSE_TYPE = 3
	OC_RPC_RESPONSE_TYPE_INVALID_CONFIGURATION   OC_RPC_RESPONSE_TYPE = 4
	OC_RPC_RESPONSE_TYPE_UNSUPPORTED_INTERVAL    OC_RPC_RESPONSE_TYPE = 5
	OC_RPC_RESPONSE_TYPE_UNSUPPORTED_ENCODING    OC_RPC_RESPONSE_TYPE = 6
	OC_RPC_RESPONSE_TYPE_INVALID_SUBSCRIPTION_ID OC_RPC_RESPONSE_TYPE = 7
)

// Enum value maps for OC_RPC_RESPONSE_TYPE.
var (
	OC_RPC_RESPONSE_TYPE_name = map[int32]string{
		0: "OK",
		1: "NOK",
		2: "UNSUPPORTED_PATH",
		3: "INVALID_PATH",
		4: "INVALID_CONFIGURATION",
		5: "UNSUPPORTED_INTERVAL",
		6: "UNSUPPORTED_ENCODING",
		7: "INVALID_SUBSCRIPTION_ID",
	}
	OC_RPC_RESPONSE_TYPE_value = map[string]int32{
		"OK":                      0,
		"NOK":                     1,
		"UNSUPPORTED_PATH":        2,
		"INVALID_PATH":            3,
		"INVALID_CONFIGURATION":   4,
		"UNSUPPORTED_INTERVAL":    5,
		"UNSUPPORTED_ENCODING":    6,
		"INVALID_SUBSCRIPTION_ID": 7,
	}
)

func (x OC_RPC_RESPONSE_TYPE) Enum() *OC_RPC_RESPONSE_TYPE {
	p := new(OC_RPC_RESPONSE_TYPE)
	*p = x
	return p
}

func (x OC_RPC_RESPONSE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OC_RPC_RESPONSE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_ems_grpc_proto_enumTypes[1].Descriptor()
}

func (OC_RPC_RESPONSE_TYPE) Type() protoreflect.EnumType {
	return &file_ems_grpc_proto_enumTypes[1]
}

func (x OC_RPC_RESPONSE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OC_RPC_RESPONSE_TYPE.Descriptor instead.
func (OC_RPC_RESPONSE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{1}
}

type GET_MODEL_TYPE int32

const (
	GET_MODEL_TYPE_MODULE       GET_MODEL_TYPE = 0
	GET_MODEL_TYPE_AUGMENTATION GET_MODEL_TYPE = 1
	GET_MODEL_TYPE_DEVIATION    GET_MODEL_TYPE = 2
	GET_MODEL_TYPE_BUNDLE       GET_MODEL_TYPE = 3
)

// Enum value maps for GET_MODEL_TYPE.
var (
	GET_MODEL_TYPE_name = map[int32]string{
		0: "MODULE",
		1: "AUGMENTATION",
		2: "DEVIATION",
		3: "BUNDLE",
	}
	GET_MODEL_TYPE_value = map[string]int32{
		"MODULE":       0,
		"AUGMENTATION": 1,
		"DEVIATION":    2,
		"BUNDLE":       3,
	}
)

func (x GET_MODEL_TYPE) Enum() *GET_MODEL_TYPE {
	p := new(GET_MODEL_TYPE)
	*p = x
	return p
}

func (x GET_MODEL_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GET_MODEL_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_ems_grpc_proto_enumTypes[2].Descriptor()
}

func (GET_MODEL_TYPE) Type() protoreflect.EnumType {
	return &file_ems_grpc_proto_enumTypes[2]
}

func (x GET_MODEL_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GET_MODEL_TYPE.Descriptor instead.
func (GET_MODEL_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{2}
}

type TelemetryStreamDestination_TSP int32

const (
	TelemetryStreamDestination_TSP_TCP  TelemetryStreamDestination_TSP = 0
	TelemetryStreamDestination_TSP_GRPC TelemetryStreamDestination_TSP = 1
)

// Enum value maps for TelemetryStreamDestination_TSP.
var (
	TelemetryStreamDestination_TSP_name = map[int32]string{
		0: "TSP_TCP",
		1: "TSP_GRPC",
	}
	TelemetryStreamDestination_TSP_value = map[string]int32{
		"TSP_TCP":  0,
		"TSP_GRPC": 1,
	}
)

func (x TelemetryStreamDestination_TSP) Enum() *TelemetryStreamDestination_TSP {
	p := new(TelemetryStreamDestination_TSP)
	*p = x
	return p
}

func (x TelemetryStreamDestination_TSP) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TelemetryStreamDestination_TSP) Descriptor() protoreflect.EnumDescriptor {
	return file_ems_grpc_proto_enumTypes[3].Descriptor()
}

func (TelemetryStreamDestination_TSP) Type() protoreflect.EnumType {
	return &file_ems_grpc_proto_enumTypes[3]
}

func (x TelemetryStreamDestination_TSP) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TelemetryStreamDestination_TSP.Descriptor instead.
func (TelemetryStreamDestination_TSP) EnumDescriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{24, 0}
}

type SubscriptionList_ENC_SPEC int32

const (
	SubscriptionList_ENC_KV_GPB SubscriptionList_ENC_SPEC = 0
	SubscriptionList_ENC_GPB    SubscriptionList_ENC_SPEC = 1
)

// Enum value maps for SubscriptionList_ENC_SPEC.
var (
	SubscriptionList_ENC_SPEC_name = map[int32]string{
		0: "ENC_KV_GPB",
		1: "ENC_GPB",
	}
	SubscriptionList_ENC_SPEC_value = map[string]int32{
		"ENC_KV_GPB": 0,
		"ENC_GPB":    1,
	}
)

func (x SubscriptionList_ENC_SPEC) Enum() *SubscriptionList_ENC_SPEC {
	p := new(SubscriptionList_ENC_SPEC)
	*p = x
	return p
}

func (x SubscriptionList_ENC_SPEC) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriptionList_ENC_SPEC) Descriptor() protoreflect.EnumDescriptor {
	return file_ems_grpc_proto_enumTypes[4].Descriptor()
}

func (SubscriptionList_ENC_SPEC) Type() protoreflect.EnumType {
	return &file_ems_grpc_proto_enumTypes[4]
}

func (x SubscriptionList_ENC_SPEC) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriptionList_ENC_SPEC.Descriptor instead.
func (SubscriptionList_ENC_SPEC) EnumDescriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{26, 0}
}

type GetModelsInput_MODLE_REQUEST_TYPE int32

const (
	GetModelsInput_SUMMARY GetModelsInput_MODLE_REQUEST_TYPE = 0
	GetModelsInput_DETAIL  GetModelsInput_MODLE_REQUEST_TYPE = 1
)

// Enum value maps for GetModelsInput_MODLE_REQUEST_TYPE.
var (
	GetModelsInput_MODLE_REQUEST_TYPE_name = map[int32]string{
		0: "SUMMARY",
		1: "DETAIL",
	}
	GetModelsInput_MODLE_REQUEST_TYPE_value = map[string]int32{
		"SUMMARY": 0,
		"DETAIL":  1,
	}
)

func (x GetModelsInput_MODLE_REQUEST_TYPE) Enum() *GetModelsInput_MODLE_REQUEST_TYPE {
	p := new(GetModelsInput_MODLE_REQUEST_TYPE)
	*p = x
	return p
}

func (x GetModelsInput_MODLE_REQUEST_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetModelsInput_MODLE_REQUEST_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_ems_grpc_proto_enumTypes[5].Descriptor()
}

func (GetModelsInput_MODLE_REQUEST_TYPE) Type() protoreflect.EnumType {
	return &file_ems_grpc_proto_enumTypes[5]
}

func (x GetModelsInput_MODLE_REQUEST_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetModelsInput_MODLE_REQUEST_TYPE.Descriptor instead.
func (GetModelsInput_MODLE_REQUEST_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{31, 0}
}

type ConfigGetArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId        int64  `protobuf:"varint,1,opt,name=ReqId,proto3" json:"ReqId,omitempty"`
	Yangpathjson string `protobuf:"bytes,2,opt,name=yangpathjson,proto3" json:"yangpathjson,omitempty"`
}

func (x *ConfigGetArgs) Reset() {
	*x = ConfigGetArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigGetArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigGetArgs) ProtoMessage() {}

func (x *ConfigGetArgs) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigGetArgs.ProtoReflect.Descriptor instead.
func (*ConfigGetArgs) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigGetArgs) GetReqId() int64 {
	if x != nil {
		return x.ReqId
	}
	return 0
}

func (x *ConfigGetArgs) GetYangpathjson() string {
	if x != nil {
		return x.Yangpathjson
	}
	return ""
}

type ConfigGetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResReqId int64  `protobuf:"varint,1,opt,name=ResReqId,proto3" json:"ResReqId,omitempty"`
	Yangjson string `protobuf:"bytes,2,opt,name=yangjson,proto3" json:"yangjson,omitempty"`
	Errors   string `protobuf:"bytes,3,opt,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ConfigGetReply) Reset() {
	*x = ConfigGetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigGetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigGetReply) ProtoMessage() {}

func (x *ConfigGetReply) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigGetReply.ProtoReflect.Descriptor instead.
func (*ConfigGetReply) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{1}
}

func (x *ConfigGetReply) GetResReqId() int64 {
	if x != nil {
		return x.ResReqId
	}
	return 0
}

func (x *ConfigGetReply) GetYangjson() string {
	if x != nil {
		return x.Yangjson
	}
	return ""
}

func (x *ConfigGetReply) GetErrors() string {
	if x != nil {
		return x.Errors
	}
	return ""
}

type GetOperArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId        int64  `protobuf:"varint,1,opt,name=ReqId,proto3" json:"ReqId,omitempty"`
	Yangpathjson string `protobuf:"bytes,2,opt,name=yangpathjson,proto3" json:"yangpathjson,omitempty"`
}

func (x *GetOperArgs) Reset() {
	*x = GetOperArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOperArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperArgs) ProtoMessage() {}

func (x *GetOperArgs) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperArgs.ProtoReflect.Descriptor instead.
func (*GetOperArgs) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{2}
}

func (x *GetOperArgs) GetReqId() int64 {
	if x != nil {
		return x.ReqId
	}
	return 0
}

func (x *GetOperArgs) GetYangpathjson() string {
	if x != nil {
		return x.Yangpathjson
	}
	return ""
}

type GetOperReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResReqId int64  `protobuf:"varint,1,opt,name=ResReqId,proto3" json:"ResReqId,omitempty"`
	Yangjson string `protobuf:"bytes,2,opt,name=yangjson,proto3" json:"yangjson,omitempty"`
	Errors   string `protobuf:"bytes,3,opt,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetOperReply) Reset() {
	*x = GetOperReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOperReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperReply) ProtoMessage() {}

func (x *GetOperReply) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperReply.ProtoReflect.Descriptor instead.
func (*GetOperReply) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{3}
}

func (x *GetOperReply) GetResReqId() int64 {
	if x != nil {
		return x.ResReqId
	}
	return 0
}

func (x *GetOperReply) GetYangjson() string {
	if x != nil {
		return x.Yangjson
	}
	return ""
}

func (x *GetOperReply) GetErrors() string {
	if x != nil {
		return x.Errors
	}
	return ""
}

type ConfigArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId          int64  `protobuf:"varint,1,opt,name=ReqId,proto3" json:"ReqId,omitempty"`
	Yangjson       string `protobuf:"bytes,2,opt,name=yangjson,proto3" json:"yangjson,omitempty"`
	Confirmed      bool   `protobuf:"varint,3,opt,name=Confirmed,proto3" json:"Confirmed,omitempty"`
	ConfirmTimeout uint32 `protobuf:"varint,4,opt,name=ConfirmTimeout,proto3" json:"ConfirmTimeout,omitempty"`
}

func (x *ConfigArgs) Reset() {
	*x = ConfigArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigArgs) ProtoMessage() {}

func (x *ConfigArgs) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigArgs.ProtoReflect.Descriptor instead.
func (*ConfigArgs) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{4}
}

func (x *ConfigArgs) GetReqId() int64 {
	if x != nil {
		return x.ReqId
	}
	return 0
}

func (x *ConfigArgs) GetYangjson() string {
	if x != nil {
		return x.Yangjson
	}
	return ""
}

func (x *ConfigArgs) GetConfirmed() bool {
	if x != nil {
		return x.Confirmed
	}
	return false
}

func (x *ConfigArgs) GetConfirmTimeout() uint32 {
	if x != nil {
		return x.ConfirmTimeout
	}
	return 0
}

type ConfigReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResReqId int64  `protobuf:"varint,1,opt,name=ResReqId,proto3" json:"ResReqId,omitempty"`
	Errors   string `protobuf:"bytes,2,opt,name=errors,proto3" json:"errors,omitempty"`
	CommitID uint32 `protobuf:"varint,3,opt,name=CommitID,proto3" json:"CommitID,omitempty"`
}

func (x *ConfigReply) Reset() {
	*x = ConfigReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigReply) ProtoMessage() {}

func (x *ConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigReply.ProtoReflect.Descriptor instead.
func (*ConfigReply) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{5}
}

func (x *ConfigReply) GetResReqId() int64 {
	if x != nil {
		return x.ResReqId
	}
	return 0
}

func (x *ConfigReply) GetErrors() string {
	if x != nil {
		return x.Errors
	}
	return ""
}

func (x *ConfigReply) GetCommitID() uint32 {
	if x != nil {
		return x.CommitID
	}
	return 0
}

type CliConfigArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId          int64  `protobuf:"varint,1,opt,name=ReqId,proto3" json:"ReqId,omitempty"`
	Cli            string `protobuf:"bytes,2,opt,name=cli,proto3" json:"cli,omitempty"`
	Confirmed      bool   `protobuf:"varint,3,opt,name=Confirmed,proto3" json:"Confirmed,omitempty"`
	ConfirmTimeout uint32 `protobuf:"varint,4,opt,name=ConfirmTimeout,proto3" json:"ConfirmTimeout,omitempty"`
}

func (x *CliConfigArgs) Reset() {
	*x = CliConfigArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CliConfigArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CliConfigArgs) ProtoMessage() {}

func (x *CliConfigArgs) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CliConfigArgs.ProtoReflect.Descriptor instead.
func (*CliConfigArgs) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{6}
}

func (x *CliConfigArgs) GetReqId() int64 {
	if x != nil {
		return x.ReqId
	}
	return 0
}

func (x *CliConfigArgs) GetCli() string {
	if x != nil {
		return x.Cli
	}
	return ""
}

func (x *CliConfigArgs) GetConfirmed() bool {
	if x != nil {
		return x.Confirmed
	}
	return false
}

func (x *CliConfigArgs) GetConfirmTimeout() uint32 {
	if x != nil {
		return x.ConfirmTimeout
	}
	return 0
}

type CliConfigReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResReqId int64  `protobuf:"varint,1,opt,name=ResReqId,proto3" json:"ResReqId,omitempty"`
	Errors   string `protobuf:"bytes,2,opt,name=errors,proto3" json:"errors,omitempty"`
	CommitID uint32 `protobuf:"varint,3,opt,name=CommitID,proto3" json:"CommitID,omitempty"`
}

func (x *CliConfigReply) Reset() {
	*x = CliConfigReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CliConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CliConfigReply) ProtoMessage() {}

func (x *CliConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CliConfigReply.ProtoReflect.Descriptor instead.
func (*CliConfigReply) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{7}
}

func (x *CliConfigReply) GetResReqId() int64 {
	if x != nil {
		return x.ResReqId
	}
	return 0
}

func (x *CliConfigReply) GetErrors() string {
	if x != nil {
		return x.Errors
	}
	return ""
}

func (x *CliConfigReply) GetCommitID() uint32 {
	if x != nil {
		return x.CommitID
	}
	return 0
}

type CommitReplaceArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId    int64  `protobuf:"varint,1,opt,name=ReqId,proto3" json:"ReqId,omitempty"`
	Cli      string `protobuf:"bytes,2,opt,name=cli,proto3" json:"cli,omitempty"`
	Yangjson string `protobuf:"bytes,3,opt,name=yangjson,proto3" json:"yangjson,omitempty"`
}

func (x *CommitReplaceArgs) Reset() {
	*x = CommitReplaceArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitReplaceArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitReplaceArgs) ProtoMessage() {}

func (x *CommitReplaceArgs) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitReplaceArgs.ProtoReflect.Descriptor instead.
func (*CommitReplaceArgs) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{8}
}

func (x *CommitReplaceArgs) GetReqId() int64 {
	if x != nil {
		return x.ReqId
	}
	return 0
}

func (x *CommitReplaceArgs) GetCli() string {
	if x != nil {
		return x.Cli
	}
	return ""
}

func (x *CommitReplaceArgs) GetYangjson() string {
	if x != nil {
		return x.Yangjson
	}
	return ""
}

type CommitReplaceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResReqId int64  `protobuf:"varint,1,opt,name=ResReqId,proto3" json:"ResReqId,omitempty"`
	Errors   string `protobuf:"bytes,2,opt,name=errors,proto3" json:"errors,omitempty"`
}

func (x *CommitReplaceReply) Reset() {
	*x = CommitReplaceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitReplaceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitReplaceReply) ProtoMessage() {}

func (x *CommitReplaceReply) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitReplaceReply.ProtoReflect.Descriptor instead.
func (*CommitReplaceReply) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{9}
}

func (x *CommitReplaceReply) GetResReqId() int64 {
	if x != nil {
		return x.ResReqId
	}
	return 0
}

func (x *CommitReplaceReply) GetErrors() string {
	if x != nil {
		return x.Errors
	}
	return ""
}

type CommitMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label   string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *CommitMsg) Reset() {
	*x = CommitMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitMsg) ProtoMessage() {}

func (x *CommitMsg) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitMsg.ProtoReflect.Descriptor instead.
func (*CommitMsg) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{10}
}

func (x *CommitMsg) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *CommitMsg) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type CommitArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId    int64  `protobuf:"varint,1,opt,name=ReqId,proto3" json:"ReqId,omitempty"`
	CommitID uint32 `protobuf:"varint,2,opt,name=CommitID,proto3" json:"CommitID,omitempty"`
}

func (x *CommitArgs) Reset() {
	*x = CommitArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitArgs) ProtoMessage() {}

func (x *CommitArgs) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitArgs.ProtoReflect.Descriptor instead.
func (*CommitArgs) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{11}
}

func (x *CommitArgs) GetReqId() int64 {
	if x != nil {
		return x.ReqId
	}
	return 0
}

func (x *CommitArgs) GetCommitID() uint32 {
	if x != nil {
		return x.CommitID
	}
	return 0
}

type CommitReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResReqId int64  `protobuf:"varint,1,opt,name=ResReqId,proto3" json:"ResReqId,omitempty"`
	Errors   string `protobuf:"bytes,2,opt,name=errors,proto3" json:"errors,omitempty"`
}

func (x *CommitReply) Reset() {
	*x = CommitReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitReply) ProtoMessage() {}

func (x *CommitReply) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitReply.ProtoReflect.Descriptor instead.
func (*CommitReply) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{12}
}

func (x *CommitReply) GetResReqId() int64 {
	if x != nil {
		return x.ResReqId
	}
	return 0
}

func (x *CommitReply) GetErrors() string {
	if x != nil {
		return x.Errors
	}
	return ""
}

type DiscardChangesArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId int64 `protobuf:"varint,1,opt,name=ReqId,proto3" json:"ReqId,omitempty"`
}

func (x *DiscardChangesArgs) Reset() {
	*x = DiscardChangesArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscardChangesArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscardChangesArgs) ProtoMessage() {}

func (x *DiscardChangesArgs) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscardChangesArgs.ProtoReflect.Descriptor instead.
func (*DiscardChangesArgs) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{13}
}

func (x *DiscardChangesArgs) GetReqId() int64 {
	if x != nil {
		return x.ReqId
	}
	return 0
}

type DiscardChangesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResReqId int64  `protobuf:"varint,1,opt,name=ResReqId,proto3" json:"ResReqId,omitempty"`
	Errors   string `protobuf:"bytes,2,opt,name=errors,proto3" json:"errors,omitempty"`
}

func (x *DiscardChangesReply) Reset() {
	*x = DiscardChangesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscardChangesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscardChangesReply) ProtoMessage() {}

func (x *DiscardChangesReply) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscardChangesReply.ProtoReflect.Descriptor instead.
func (*DiscardChangesReply) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{14}
}

func (x *DiscardChangesReply) GetResReqId() int64 {
	if x != nil {
		return x.ResReqId
	}
	return 0
}

func (x *DiscardChangesReply) GetErrors() string {
	if x != nil {
		return x.Errors
	}
	return ""
}

type ShowCmdArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId int64  `protobuf:"varint,1,opt,name=ReqId,proto3" json:"ReqId,omitempty"`
	Cli   string `protobuf:"bytes,2,opt,name=cli,proto3" json:"cli,omitempty"`
}

func (x *ShowCmdArgs) Reset() {
	*x = ShowCmdArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowCmdArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowCmdArgs) ProtoMessage() {}

func (x *ShowCmdArgs) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowCmdArgs.ProtoReflect.Descriptor instead.
func (*ShowCmdArgs) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{15}
}

func (x *ShowCmdArgs) GetReqId() int64 {
	if x != nil {
		return x.ReqId
	}
	return 0
}

func (x *ShowCmdArgs) GetCli() string {
	if x != nil {
		return x.Cli
	}
	return ""
}

type ShowCmdTextReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResReqId int64  `protobuf:"varint,1,opt,name=ResReqId,proto3" json:"ResReqId,omitempty"`
	Output   string `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
	Errors   string `protobuf:"bytes,3,opt,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ShowCmdTextReply) Reset() {
	*x = ShowCmdTextReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowCmdTextReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowCmdTextReply) ProtoMessage() {}

func (x *ShowCmdTextReply) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowCmdTextReply.ProtoReflect.Descriptor instead.
func (*ShowCmdTextReply) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{16}
}

func (x *ShowCmdTextReply) GetResReqId() int64 {
	if x != nil {
		return x.ResReqId
	}
	return 0
}

func (x *ShowCmdTextReply) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *ShowCmdTextReply) GetErrors() string {
	if x != nil {
		return x.Errors
	}
	return ""
}

type ShowCmdJSONReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResReqId   int64  `protobuf:"varint,1,opt,name=ResReqId,proto3" json:"ResReqId,omitempty"`
	Jsonoutput string `protobuf:"bytes,2,opt,name=jsonoutput,proto3" json:"jsonoutput,omitempty"`
	Errors     string `protobuf:"bytes,3,opt,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ShowCmdJSONReply) Reset() {
	*x = ShowCmdJSONReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowCmdJSONReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowCmdJSONReply) ProtoMessage() {}

func (x *ShowCmdJSONReply) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowCmdJSONReply.ProtoReflect.Descriptor instead.
func (*ShowCmdJSONReply) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{17}
}

func (x *ShowCmdJSONReply) GetResReqId() int64 {
	if x != nil {
		return x.ResReqId
	}
	return 0
}

func (x *ShowCmdJSONReply) GetJsonoutput() string {
	if x != nil {
		return x.Jsonoutput
	}
	return ""
}

func (x *ShowCmdJSONReply) GetErrors() string {
	if x != nil {
		return x.Errors
	}
	return ""
}

// QOSMarking specifies the DSCP value to be set on transmitted telemetry
type QOSMarking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Marking uint32 `protobuf:"varint,1,opt,name=marking,proto3" json:"marking,omitempty"`
}

func (x *QOSMarking) Reset() {
	*x = QOSMarking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QOSMarking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QOSMarking) ProtoMessage() {}

func (x *QOSMarking) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QOSMarking.ProtoReflect.Descriptor instead.
func (*QOSMarking) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{18}
}

func (x *QOSMarking) GetMarking() uint32 {
	if x != nil {
		return x.Marking
	}
	return 0
}

type CreateSubsArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId         int64       `protobuf:"varint,1,opt,name=ReqId,proto3" json:"ReqId,omitempty"`
	Encode        int64       `protobuf:"varint,2,opt,name=encode,proto3" json:"encode,omitempty"`
	Subidstr      string      `protobuf:"bytes,3,opt,name=subidstr,proto3" json:"subidstr,omitempty"`
	Qos           *QOSMarking `protobuf:"bytes,4,opt,name=qos,proto3" json:"qos,omitempty"` // DSCP marking to be used.
	Subscriptions []string    `protobuf:"bytes,5,rep,name=Subscriptions,proto3" json:"Subscriptions,omitempty"`
}

func (x *CreateSubsArgs) Reset() {
	*x = CreateSubsArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubsArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubsArgs) ProtoMessage() {}

func (x *CreateSubsArgs) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubsArgs.ProtoReflect.Descriptor instead.
func (*CreateSubsArgs) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{19}
}

func (x *CreateSubsArgs) GetReqId() int64 {
	if x != nil {
		return x.ReqId
	}
	return 0
}

func (x *CreateSubsArgs) GetEncode() int64 {
	if x != nil {
		return x.Encode
	}
	return 0
}

func (x *CreateSubsArgs) GetSubidstr() string {
	if x != nil {
		return x.Subidstr
	}
	return ""
}

func (x *CreateSubsArgs) GetQos() *QOSMarking {
	if x != nil {
		return x.Qos
	}
	return nil
}

func (x *CreateSubsArgs) GetSubscriptions() []string {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type ActionJSONArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId        int64  `protobuf:"varint,1,opt,name=ReqId,proto3" json:"ReqId,omitempty"`
	Yangpathjson string `protobuf:"bytes,2,opt,name=yangpathjson,proto3" json:"yangpathjson,omitempty"`
}

func (x *ActionJSONArgs) Reset() {
	*x = ActionJSONArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionJSONArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionJSONArgs) ProtoMessage() {}

func (x *ActionJSONArgs) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionJSONArgs.ProtoReflect.Descriptor instead.
func (*ActionJSONArgs) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{20}
}

func (x *ActionJSONArgs) GetReqId() int64 {
	if x != nil {
		return x.ReqId
	}
	return 0
}

func (x *ActionJSONArgs) GetYangpathjson() string {
	if x != nil {
		return x.Yangpathjson
	}
	return ""
}

type ActionJSONReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResReqId int64  `protobuf:"varint,1,opt,name=ResReqId,proto3" json:"ResReqId,omitempty"`
	Yangjson string `protobuf:"bytes,2,opt,name=yangjson,proto3" json:"yangjson,omitempty"`
	Errors   string `protobuf:"bytes,3,opt,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ActionJSONReply) Reset() {
	*x = ActionJSONReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionJSONReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionJSONReply) ProtoMessage() {}

func (x *ActionJSONReply) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionJSONReply.ProtoReflect.Descriptor instead.
func (*ActionJSONReply) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{21}
}

func (x *ActionJSONReply) GetResReqId() int64 {
	if x != nil {
		return x.ResReqId
	}
	return 0
}

func (x *ActionJSONReply) GetYangjson() string {
	if x != nil {
		return x.Yangjson
	}
	return ""
}

func (x *ActionJSONReply) GetErrors() string {
	if x != nil {
		return x.Errors
	}
	return ""
}

type CreateSubsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResReqId int64  `protobuf:"varint,1,opt,name=ResReqId,proto3" json:"ResReqId,omitempty"`
	Data     []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Errors   string `protobuf:"bytes,3,opt,name=errors,proto3" json:"errors,omitempty"`
}

func (x *CreateSubsReply) Reset() {
	*x = CreateSubsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubsReply) ProtoMessage() {}

func (x *CreateSubsReply) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubsReply.ProtoReflect.Descriptor instead.
func (*CreateSubsReply) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{22}
}

func (x *CreateSubsReply) GetResReqId() int64 {
	if x != nil {
		return x.ResReqId
	}
	return 0
}

func (x *CreateSubsReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreateSubsReply) GetErrors() string {
	if x != nil {
		return x.Errors
	}
	return ""
}

type SubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId int64 `protobuf:"varint,1,opt,name=ReqId,proto3" json:"ReqId,omitempty"`
	// Types that are assignable to Request:
	//	*SubscribeRequest_Subscribe
	Request isSubscribeRequest_Request `protobuf_oneof:"request"`
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{23}
}

func (x *SubscribeRequest) GetReqId() int64 {
	if x != nil {
		return x.ReqId
	}
	return 0
}

func (m *SubscribeRequest) GetRequest() isSubscribeRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *SubscribeRequest) GetSubscribe() *SubscriptionList {
	if x, ok := x.GetRequest().(*SubscribeRequest_Subscribe); ok {
		return x.Subscribe
	}
	return nil
}

type isSubscribeRequest_Request interface {
	isSubscribeRequest_Request()
}

type SubscribeRequest_Subscribe struct {
	Subscribe *SubscriptionList `protobuf:"bytes,2,opt,name=subscribe,proto3,oneof"`
}

func (*SubscribeRequest_Subscribe) isSubscribeRequest_Request() {}

type TelemetryStreamDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationAddress      string                         `protobuf:"bytes,1,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	DestinationPort         uint32                         `protobuf:"varint,2,opt,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"`
	TelemetryStreamProtocol TelemetryStreamDestination_TSP `protobuf:"varint,3,opt,name=telemetry_stream_protocol,json=telemetryStreamProtocol,proto3,enum=IOSXRExtensibleManagabilityService.TelemetryStreamDestination_TSP" json:"telemetry_stream_protocol,omitempty"`
}

func (x *TelemetryStreamDestination) Reset() {
	*x = TelemetryStreamDestination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryStreamDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryStreamDestination) ProtoMessage() {}

func (x *TelemetryStreamDestination) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryStreamDestination.ProtoReflect.Descriptor instead.
func (*TelemetryStreamDestination) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{24}
}

func (x *TelemetryStreamDestination) GetDestinationAddress() string {
	if x != nil {
		return x.DestinationAddress
	}
	return ""
}

func (x *TelemetryStreamDestination) GetDestinationPort() uint32 {
	if x != nil {
		return x.DestinationPort
	}
	return 0
}

func (x *TelemetryStreamDestination) GetTelemetryStreamProtocol() TelemetryStreamDestination_TSP {
	if x != nil {
		return x.TelemetryStreamProtocol
	}
	return TelemetryStreamDestination_TSP_TCP
}

type TelemetryPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
}

func (x *TelemetryPath) Reset() {
	*x = TelemetryPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryPath) ProtoMessage() {}

func (x *TelemetryPath) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryPath.ProtoReflect.Descriptor instead.
func (*TelemetryPath) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{25}
}

func (x *TelemetryPath) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type SubscriptionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelemetryStreamDestinations []*TelemetryStreamDestination `protobuf:"bytes,1,rep,name=TelemetryStreamDestinations,proto3" json:"TelemetryStreamDestinations,omitempty"`
	TelemetryPaths              []*TelemetryPath              `protobuf:"bytes,2,rep,name=TelemetryPaths,proto3" json:"TelemetryPaths,omitempty"`
	SampleInterval              uint64                        `protobuf:"varint,3,opt,name=sample_interval,json=sampleInterval,proto3" json:"sample_interval,omitempty"`
	Encoding                    SubscriptionList_ENC_SPEC     `protobuf:"varint,4,opt,name=encoding,proto3,enum=IOSXRExtensibleManagabilityService.SubscriptionList_ENC_SPEC" json:"encoding,omitempty"`
	Qos                         *QOSMarking                   `protobuf:"bytes,5,opt,name=qos,proto3" json:"qos,omitempty"` // DSCP marking to be used.
}

func (x *SubscriptionList) Reset() {
	*x = SubscriptionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionList) ProtoMessage() {}

func (x *SubscriptionList) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionList.ProtoReflect.Descriptor instead.
func (*SubscriptionList) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{26}
}

func (x *SubscriptionList) GetTelemetryStreamDestinations() []*TelemetryStreamDestination {
	if x != nil {
		return x.TelemetryStreamDestinations
	}
	return nil
}

func (x *SubscriptionList) GetTelemetryPaths() []*TelemetryPath {
	if x != nil {
		return x.TelemetryPaths
	}
	return nil
}

func (x *SubscriptionList) GetSampleInterval() uint64 {
	if x != nil {
		return x.SampleInterval
	}
	return 0
}

func (x *SubscriptionList) GetEncoding() SubscriptionList_ENC_SPEC {
	if x != nil {
		return x.Encoding
	}
	return SubscriptionList_ENC_KV_GPB
}

func (x *SubscriptionList) GetQos() *QOSMarking {
	if x != nil {
		return x.Qos
	}
	return nil
}

type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageJson string               `protobuf:"bytes,1,opt,name=message_json,json=messageJson,proto3" json:"message_json,omitempty"`
	Code        OC_RPC_RESPONSE_TYPE `protobuf:"varint,2,opt,name=code,proto3,enum=IOSXRExtensibleManagabilityService.OC_RPC_RESPONSE_TYPE" json:"code,omitempty"`
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{27}
}

func (x *StatusResponse) GetMessageJson() string {
	if x != nil {
		return x.MessageJson
	}
	return ""
}

func (x *StatusResponse) GetCode() OC_RPC_RESPONSE_TYPE {
	if x != nil {
		return x.Code
	}
	return OC_RPC_RESPONSE_TYPE_OK
}

type Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Notification) Reset() {
	*x = Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification) ProtoMessage() {}

func (x *Notification) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification.ProtoReflect.Descriptor instead.
func (*Notification) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{28}
}

func (x *Notification) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type SubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResReqId       int64  `protobuf:"varint,1,opt,name=ResReqId,proto3" json:"ResReqId,omitempty"`
	SubscriptionId uint64 `protobuf:"varint,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	// Types that are assignable to Response:
	//	*SubscribeResponse_Update
	//	*SubscribeResponse_Status
	Response isSubscribeResponse_Response `protobuf_oneof:"response"`
}

func (x *SubscribeResponse) Reset() {
	*x = SubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResponse) ProtoMessage() {}

func (x *SubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeResponse.ProtoReflect.Descriptor instead.
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{29}
}

func (x *SubscribeResponse) GetResReqId() int64 {
	if x != nil {
		return x.ResReqId
	}
	return 0
}

func (x *SubscribeResponse) GetSubscriptionId() uint64 {
	if x != nil {
		return x.SubscriptionId
	}
	return 0
}

func (m *SubscribeResponse) GetResponse() isSubscribeResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *SubscribeResponse) GetUpdate() *Notification {
	if x, ok := x.GetResponse().(*SubscribeResponse_Update); ok {
		return x.Update
	}
	return nil
}

func (x *SubscribeResponse) GetStatus() *StatusResponse {
	if x, ok := x.GetResponse().(*SubscribeResponse_Status); ok {
		return x.Status
	}
	return nil
}

type isSubscribeResponse_Response interface {
	isSubscribeResponse_Response()
}

type SubscribeResponse_Update struct {
	Update *Notification `protobuf:"bytes,3,opt,name=update,proto3,oneof"`
}

type SubscribeResponse_Status struct {
	Status *StatusResponse `protobuf:"bytes,4,opt,name=status,proto3,oneof"`
}

func (*SubscribeResponse_Update) isSubscribeResponse_Response() {}

func (*SubscribeResponse_Status) isSubscribeResponse_Response() {}

type CancelSubscribeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId          int64  `protobuf:"varint,1,opt,name=ReqId,proto3" json:"ReqId,omitempty"`
	SubscriptionId uint64 `protobuf:"varint,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
}

func (x *CancelSubscribeReq) Reset() {
	*x = CancelSubscribeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelSubscribeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelSubscribeReq) ProtoMessage() {}

func (x *CancelSubscribeReq) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelSubscribeReq.ProtoReflect.Descriptor instead.
func (*CancelSubscribeReq) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{30}
}

func (x *CancelSubscribeReq) GetReqId() int64 {
	if x != nil {
		return x.ReqId
	}
	return 0
}

func (x *CancelSubscribeReq) GetSubscriptionId() uint64 {
	if x != nil {
		return x.SubscriptionId
	}
	return 0
}

type GetModelsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   uint64                            `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	Name        string                            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace   string                            `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Version     string                            `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	RequestType GetModelsInput_MODLE_REQUEST_TYPE `protobuf:"varint,5,opt,name=requestType,proto3,enum=IOSXRExtensibleManagabilityService.GetModelsInput_MODLE_REQUEST_TYPE" json:"requestType,omitempty"`
}

func (x *GetModelsInput) Reset() {
	*x = GetModelsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModelsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelsInput) ProtoMessage() {}

func (x *GetModelsInput) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelsInput.ProtoReflect.Descriptor instead.
func (*GetModelsInput) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{31}
}

func (x *GetModelsInput) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *GetModelsInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetModelsInput) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetModelsInput) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetModelsInput) GetRequestType() GetModelsInput_MODLE_REQUEST_TYPE {
	if x != nil {
		return x.RequestType
	}
	return GetModelsInput_SUMMARY
}

type GetModelsOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId    uint64                       `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	Models       []*GetModelsOutput_ModelInfo `protobuf:"bytes,2,rep,name=models,proto3" json:"models,omitempty"`
	ResponseCode OC_RPC_RESPONSE_TYPE         `protobuf:"varint,3,opt,name=responseCode,proto3,enum=IOSXRExtensibleManagabilityService.OC_RPC_RESPONSE_TYPE" json:"responseCode,omitempty"`
	Msg          string                       `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *GetModelsOutput) Reset() {
	*x = GetModelsOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModelsOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelsOutput) ProtoMessage() {}

func (x *GetModelsOutput) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelsOutput.ProtoReflect.Descriptor instead.
func (*GetModelsOutput) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{32}
}

func (x *GetModelsOutput) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *GetModelsOutput) GetModels() []*GetModelsOutput_ModelInfo {
	if x != nil {
		return x.Models
	}
	return nil
}

func (x *GetModelsOutput) GetResponseCode() OC_RPC_RESPONSE_TYPE {
	if x != nil {
		return x.ResponseCode
	}
	return OC_RPC_RESPONSE_TYPE_OK
}

func (x *GetModelsOutput) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type GetProtoFileArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId    int64  `protobuf:"varint,1,opt,name=reqId,proto3" json:"reqId,omitempty"`
	YangPath string `protobuf:"bytes,2,opt,name=yangPath,proto3" json:"yangPath,omitempty"`
}

func (x *GetProtoFileArgs) Reset() {
	*x = GetProtoFileArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProtoFileArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProtoFileArgs) ProtoMessage() {}

func (x *GetProtoFileArgs) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProtoFileArgs.ProtoReflect.Descriptor instead.
func (*GetProtoFileArgs) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{33}
}

func (x *GetProtoFileArgs) GetReqId() int64 {
	if x != nil {
		return x.ReqId
	}
	return 0
}

func (x *GetProtoFileArgs) GetYangPath() string {
	if x != nil {
		return x.YangPath
	}
	return ""
}

type GetProtoFileReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId        int64  `protobuf:"varint,1,opt,name=reqId,proto3" json:"reqId,omitempty"`
	ProtoContent string `protobuf:"bytes,2,opt,name=protoContent,proto3" json:"protoContent,omitempty"`
	Errors       string `protobuf:"bytes,3,opt,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetProtoFileReply) Reset() {
	*x = GetProtoFileReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProtoFileReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProtoFileReply) ProtoMessage() {}

func (x *GetProtoFileReply) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProtoFileReply.ProtoReflect.Descriptor instead.
func (*GetProtoFileReply) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{34}
}

func (x *GetProtoFileReply) GetReqId() int64 {
	if x != nil {
		return x.ReqId
	}
	return 0
}

func (x *GetProtoFileReply) GetProtoContent() string {
	if x != nil {
		return x.ProtoContent
	}
	return ""
}

func (x *GetProtoFileReply) GetErrors() string {
	if x != nil {
		return x.Errors
	}
	return ""
}

type GetModelsOutput_ModelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string         `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Version   string         `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	ModelType GET_MODEL_TYPE `protobuf:"varint,4,opt,name=modelType,proto3,enum=IOSXRExtensibleManagabilityService.GET_MODEL_TYPE" json:"modelType,omitempty"`
	ModelData string         `protobuf:"bytes,5,opt,name=modelData,proto3" json:"modelData,omitempty"`
}

func (x *GetModelsOutput_ModelInfo) Reset() {
	*x = GetModelsOutput_ModelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ems_grpc_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModelsOutput_ModelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelsOutput_ModelInfo) ProtoMessage() {}

func (x *GetModelsOutput_ModelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ems_grpc_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelsOutput_ModelInfo.ProtoReflect.Descriptor instead.
func (*GetModelsOutput_ModelInfo) Descriptor() ([]byte, []int) {
	return file_ems_grpc_proto_rawDescGZIP(), []int{32, 0}
}

func (x *GetModelsOutput_ModelInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetModelsOutput_ModelInfo) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetModelsOutput_ModelInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetModelsOutput_ModelInfo) GetModelType() GET_MODEL_TYPE {
	if x != nil {
		return x.ModelType
	}
	return GET_MODEL_TYPE_MODULE
}

func (x *GetModelsOutput_ModelInfo) GetModelData() string {
	if x != nil {
		return x.ModelData
	}
	return ""
}

var File_ems_grpc_proto protoreflect.FileDescriptor

var file_ems_grpc_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x65, 0x6d, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x22, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x22, 0x49, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65,
	0x74, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x52, 0x65, 0x71, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x79,
	0x61, 0x6e, 0x67, 0x70, 0x61, 0x74, 0x68, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x79, 0x61, 0x6e, 0x67, 0x70, 0x61, 0x74, 0x68, 0x6a, 0x73, 0x6f, 0x6e, 0x22,
	0x60, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x52, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x52, 0x65, 0x73, 0x52, 0x65, 0x71, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x79, 0x61, 0x6e, 0x67, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x79, 0x61, 0x6e, 0x67, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x22, 0x47, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x41, 0x72, 0x67, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x52, 0x65, 0x71, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x79, 0x61, 0x6e, 0x67, 0x70, 0x61,
	0x74, 0x68, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x79, 0x61,
	0x6e, 0x67, 0x70, 0x61, 0x74, 0x68, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0x5e, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x52, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x79, 0x61, 0x6e, 0x67, 0x6a, 0x73,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x79, 0x61, 0x6e, 0x67, 0x6a, 0x73,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x0a, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x71,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x52, 0x65, 0x71, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x79, 0x61, 0x6e, 0x67, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x79, 0x61, 0x6e, 0x67, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x22, 0x5d, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x52, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x52, 0x65, 0x73, 0x52, 0x65, 0x71, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x44,
	0x22, 0x7d, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x72, 0x67,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x52, 0x65, 0x71, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6c, 0x69, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6c, 0x69, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22,
	0x60, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x52, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x52, 0x65, 0x73, 0x52, 0x65, 0x71, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49,
	0x44, 0x22, 0x57, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x71, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x52, 0x65, 0x71, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x6c, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6c, 0x69, 0x12, 0x1a,
	0x0a, 0x08, 0x79, 0x61, 0x6e, 0x67, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x79, 0x61, 0x6e, 0x67, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x12, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x52, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x52, 0x65, 0x73, 0x52, 0x65, 0x71, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x22, 0x3b, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x73,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x3e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x41, 0x72, 0x67, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x52, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x52, 0x65, 0x71, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49,
	0x44, 0x22, 0x41, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x52, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x52, 0x65, 0x73, 0x52, 0x65, 0x71, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x22, 0x2a, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65,
	0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x52, 0x65, 0x71, 0x49, 0x64,
	0x22, 0x49, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x52, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x35, 0x0a, 0x0b, 0x53,
	0x68, 0x6f, 0x77, 0x43, 0x6d, 0x64, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65,
	0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x52, 0x65, 0x71, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x6c, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63,
	0x6c, 0x69, 0x22, 0x5e, 0x0a, 0x10, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6d, 0x64, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x52, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x22, 0x66, 0x0a, 0x10, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6d, 0x64, 0x4a, 0x53, 0x4f,
	0x4e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x52, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x26, 0x0a, 0x0a, 0x51, 0x4f,
	0x53, 0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x22, 0xc2, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x52, 0x65, 0x71, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x69, 0x64, 0x73, 0x74, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x69, 0x64, 0x73, 0x74, 0x72, 0x12,
	0x40, 0x0a, 0x03, 0x71, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x49,
	0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x51, 0x4f, 0x53, 0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x03, 0x71, 0x6f,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4a, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4a, 0x53, 0x4f, 0x4e, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x71,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x52, 0x65, 0x71, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x79, 0x61, 0x6e, 0x67, 0x70, 0x61, 0x74, 0x68, 0x6a, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x79, 0x61, 0x6e, 0x67, 0x70, 0x61, 0x74, 0x68, 0x6a,
	0x73, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x53, 0x4f,
	0x4e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x52, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x79, 0x61, 0x6e, 0x67, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x79, 0x61, 0x6e, 0x67, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x59, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x52, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x22, 0x89, 0x01, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x71, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x52, 0x65, 0x71, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x09,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9a, 0x02,
	0x0a, 0x1a, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x7e, 0x0a, 0x19, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x49, 0x4f,
	0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x53, 0x50, 0x52,
	0x17, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x20, 0x0a, 0x03, 0x54, 0x53, 0x50, 0x12,
	0x0b, 0x0a, 0x07, 0x54, 0x53, 0x50, 0x5f, 0x54, 0x43, 0x50, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x54, 0x53, 0x50, 0x5f, 0x47, 0x52, 0x50, 0x43, 0x10, 0x01, 0x22, 0x23, 0x0a, 0x0d, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x22,
	0xdf, 0x03, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x1b, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x49, 0x4f, 0x53,
	0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1b, 0x54, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x0e, 0x54, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x0e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x59, 0x0a, 0x08, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e,
	0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x2e, 0x45, 0x4e, 0x43, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x52, 0x08, 0x65, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x40, 0x0a, 0x03, 0x71, 0x6f, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x4f, 0x53, 0x4d, 0x61, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x03, 0x71, 0x6f, 0x73, 0x22, 0x27, 0x0a, 0x08, 0x45, 0x4e, 0x43, 0x5f,
	0x53, 0x50, 0x45, 0x43, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x43, 0x5f, 0x4b, 0x56, 0x5f, 0x47,
	0x50, 0x42, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x43, 0x5f, 0x47, 0x50, 0x42, 0x10,
	0x01, 0x22, 0x81, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x43, 0x5f, 0x52, 0x50,
	0x43, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x22, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfe, 0x01, 0x0a, 0x11, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x52, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x52, 0x65, 0x73, 0x52, 0x65, 0x71, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x4c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0x0a, 0x12, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x52, 0x65, 0x71, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x92, 0x02, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x45, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x4d, 0x4f, 0x44, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2d, 0x0a, 0x12, 0x4d, 0x4f, 0x44, 0x4c, 0x45, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x54, 0x41,
	0x49, 0x4c, 0x10, 0x01, 0x22, 0xc0, 0x03, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x5c, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x43, 0x5f, 0x52, 0x50, 0x43, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x1a, 0xc7, 0x01,
	0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x49, 0x4f, 0x53,
	0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x45, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x09,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x44, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x79, 0x61, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x79, 0x61, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x22, 0x65, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x2a, 0x33, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x2a, 0xbb, 0x01, 0x0a, 0x14, 0x4f, 0x43,
	0x5f, 0x52, 0x50, 0x43, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x4f,
	0x4b, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54,
	0x45, 0x44, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x10, 0x05,
	0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f,
	0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x07, 0x2a, 0x49, 0x0a, 0x0e, 0x47, 0x45, 0x54, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x44,
	0x55, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x55, 0x47, 0x4d, 0x45, 0x4e, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x56, 0x49, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45,
	0x10, 0x03, 0x32, 0xba, 0x0b, 0x0a, 0x0e, 0x67, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4f, 0x70, 0x65, 0x72, 0x12, 0x76, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x31, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65,
	0x74, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x32, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x70, 0x0a,
	0x0b, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x2e, 0x49,
	0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x2f, 0x2e, 0x49,
	0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x71, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x2e, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x72, 0x67, 0x73, 0x1a,
	0x2f, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x71, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x2e, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x72,
	0x67, 0x73, 0x1a, 0x2f, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x2f, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x09, 0x43, 0x6c, 0x69,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x31, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x32, 0x2e, 0x49, 0x4f, 0x53, 0x58,
	0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x6c, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x80, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x12, 0x35, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x36, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x71, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x2e, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x41, 0x72,
	0x67, 0x73, 0x1a, 0x2f, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x89, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x36,
	0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x37, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x70, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x49,
	0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x30, 0x2e,
	0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x79, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x12, 0x32, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x33, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x7f,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x34,
	0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65,
	0x41, 0x72, 0x67, 0x73, 0x1a, 0x35, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x32,
	0x85, 0x03, 0x0a, 0x08, 0x67, 0x52, 0x50, 0x43, 0x45, 0x78, 0x65, 0x63, 0x12, 0x7e, 0x0a, 0x11,
	0x53, 0x68, 0x6f, 0x77, 0x43, 0x6d, 0x64, 0x54, 0x65, 0x78, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x2f, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6d, 0x64, 0x41, 0x72,
	0x67, 0x73, 0x1a, 0x34, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6d, 0x64, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x7e, 0x0a, 0x11,
	0x53, 0x68, 0x6f, 0x77, 0x43, 0x6d, 0x64, 0x4a, 0x53, 0x4f, 0x4e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x2f, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6d, 0x64, 0x41, 0x72,
	0x67, 0x73, 0x1a, 0x34, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6d, 0x64, 0x4a,
	0x53, 0x4f, 0x4e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x79, 0x0a, 0x0a,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x32, 0x2e, 0x49, 0x4f, 0x53,
	0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x53, 0x4f, 0x4e, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x33,
	0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x53, 0x4f, 0x4e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x32, 0x9a, 0x03, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x67, 0x52, 0x50, 0x43, 0x12, 0x85, 0x01, 0x0a, 0x12, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x12, 0x34, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x87, 0x01, 0x0a, 0x14, 0x55, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x36, 0x2e, 0x49, 0x4f,
	0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x35, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x32, 0x2e, 0x49, 0x4f, 0x53, 0x58,
	0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x33, 0x2e,
	0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ems_grpc_proto_rawDescOnce sync.Once
	file_ems_grpc_proto_rawDescData = file_ems_grpc_proto_rawDesc
)

func file_ems_grpc_proto_rawDescGZIP() []byte {
	file_ems_grpc_proto_rawDescOnce.Do(func() {
		file_ems_grpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_ems_grpc_proto_rawDescData)
	})
	return file_ems_grpc_proto_rawDescData
}

var file_ems_grpc_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_ems_grpc_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_ems_grpc_proto_goTypes = []interface{}{
	(CommitResult)(0),                      // 0: IOSXRExtensibleManagabilityService.CommitResult
	(OC_RPC_RESPONSE_TYPE)(0),              // 1: IOSXRExtensibleManagabilityService.OC_RPC_RESPONSE_TYPE
	(GET_MODEL_TYPE)(0),                    // 2: IOSXRExtensibleManagabilityService.GET_MODEL_TYPE
	(TelemetryStreamDestination_TSP)(0),    // 3: IOSXRExtensibleManagabilityService.TelemetryStreamDestination.TSP
	(SubscriptionList_ENC_SPEC)(0),         // 4: IOSXRExtensibleManagabilityService.SubscriptionList.ENC_SPEC
	(GetModelsInput_MODLE_REQUEST_TYPE)(0), // 5: IOSXRExtensibleManagabilityService.GetModelsInput.MODLE_REQUEST_TYPE
	(*ConfigGetArgs)(nil),                  // 6: IOSXRExtensibleManagabilityService.ConfigGetArgs
	(*ConfigGetReply)(nil),                 // 7: IOSXRExtensibleManagabilityService.ConfigGetReply
	(*GetOperArgs)(nil),                    // 8: IOSXRExtensibleManagabilityService.GetOperArgs
	(*GetOperReply)(nil),                   // 9: IOSXRExtensibleManagabilityService.GetOperReply
	(*ConfigArgs)(nil),                     // 10: IOSXRExtensibleManagabilityService.ConfigArgs
	(*ConfigReply)(nil),                    // 11: IOSXRExtensibleManagabilityService.ConfigReply
	(*CliConfigArgs)(nil),                  // 12: IOSXRExtensibleManagabilityService.CliConfigArgs
	(*CliConfigReply)(nil),                 // 13: IOSXRExtensibleManagabilityService.CliConfigReply
	(*CommitReplaceArgs)(nil),              // 14: IOSXRExtensibleManagabilityService.CommitReplaceArgs
	(*CommitReplaceReply)(nil),             // 15: IOSXRExtensibleManagabilityService.CommitReplaceReply
	(*CommitMsg)(nil),                      // 16: IOSXRExtensibleManagabilityService.CommitMsg
	(*CommitArgs)(nil),                     // 17: IOSXRExtensibleManagabilityService.CommitArgs
	(*CommitReply)(nil),                    // 18: IOSXRExtensibleManagabilityService.CommitReply
	(*DiscardChangesArgs)(nil),             // 19: IOSXRExtensibleManagabilityService.DiscardChangesArgs
	(*DiscardChangesReply)(nil),            // 20: IOSXRExtensibleManagabilityService.DiscardChangesReply
	(*ShowCmdArgs)(nil),                    // 21: IOSXRExtensibleManagabilityService.ShowCmdArgs
	(*ShowCmdTextReply)(nil),               // 22: IOSXRExtensibleManagabilityService.ShowCmdTextReply
	(*ShowCmdJSONReply)(nil),               // 23: IOSXRExtensibleManagabilityService.ShowCmdJSONReply
	(*QOSMarking)(nil),                     // 24: IOSXRExtensibleManagabilityService.QOSMarking
	(*CreateSubsArgs)(nil),                 // 25: IOSXRExtensibleManagabilityService.CreateSubsArgs
	(*ActionJSONArgs)(nil),                 // 26: IOSXRExtensibleManagabilityService.ActionJSONArgs
	(*ActionJSONReply)(nil),                // 27: IOSXRExtensibleManagabilityService.ActionJSONReply
	(*CreateSubsReply)(nil),                // 28: IOSXRExtensibleManagabilityService.CreateSubsReply
	(*SubscribeRequest)(nil),               // 29: IOSXRExtensibleManagabilityService.SubscribeRequest
	(*TelemetryStreamDestination)(nil),     // 30: IOSXRExtensibleManagabilityService.TelemetryStreamDestination
	(*TelemetryPath)(nil),                  // 31: IOSXRExtensibleManagabilityService.TelemetryPath
	(*SubscriptionList)(nil),               // 32: IOSXRExtensibleManagabilityService.SubscriptionList
	(*StatusResponse)(nil),                 // 33: IOSXRExtensibleManagabilityService.StatusResponse
	(*Notification)(nil),                   // 34: IOSXRExtensibleManagabilityService.Notification
	(*SubscribeResponse)(nil),              // 35: IOSXRExtensibleManagabilityService.SubscribeResponse
	(*CancelSubscribeReq)(nil),             // 36: IOSXRExtensibleManagabilityService.CancelSubscribeReq
	(*GetModelsInput)(nil),                 // 37: IOSXRExtensibleManagabilityService.GetModelsInput
	(*GetModelsOutput)(nil),                // 38: IOSXRExtensibleManagabilityService.GetModelsOutput
	(*GetProtoFileArgs)(nil),               // 39: IOSXRExtensibleManagabilityService.GetProtoFileArgs
	(*GetProtoFileReply)(nil),              // 40: IOSXRExtensibleManagabilityService.GetProtoFileReply
	(*GetModelsOutput_ModelInfo)(nil),      // 41: IOSXRExtensibleManagabilityService.GetModelsOutput.ModelInfo
}
var file_ems_grpc_proto_depIdxs = []int32{
	24, // 0: IOSXRExtensibleManagabilityService.CreateSubsArgs.qos:type_name -> IOSXRExtensibleManagabilityService.QOSMarking
	32, // 1: IOSXRExtensibleManagabilityService.SubscribeRequest.subscribe:type_name -> IOSXRExtensibleManagabilityService.SubscriptionList
	3,  // 2: IOSXRExtensibleManagabilityService.TelemetryStreamDestination.telemetry_stream_protocol:type_name -> IOSXRExtensibleManagabilityService.TelemetryStreamDestination.TSP
	30, // 3: IOSXRExtensibleManagabilityService.SubscriptionList.TelemetryStreamDestinations:type_name -> IOSXRExtensibleManagabilityService.TelemetryStreamDestination
	31, // 4: IOSXRExtensibleManagabilityService.SubscriptionList.TelemetryPaths:type_name -> IOSXRExtensibleManagabilityService.TelemetryPath
	4,  // 5: IOSXRExtensibleManagabilityService.SubscriptionList.encoding:type_name -> IOSXRExtensibleManagabilityService.SubscriptionList.ENC_SPEC
	24, // 6: IOSXRExtensibleManagabilityService.SubscriptionList.qos:type_name -> IOSXRExtensibleManagabilityService.QOSMarking
	1,  // 7: IOSXRExtensibleManagabilityService.StatusResponse.code:type_name -> IOSXRExtensibleManagabilityService.OC_RPC_RESPONSE_TYPE
	34, // 8: IOSXRExtensibleManagabilityService.SubscribeResponse.update:type_name -> IOSXRExtensibleManagabilityService.Notification
	33, // 9: IOSXRExtensibleManagabilityService.SubscribeResponse.status:type_name -> IOSXRExtensibleManagabilityService.StatusResponse
	5,  // 10: IOSXRExtensibleManagabilityService.GetModelsInput.requestType:type_name -> IOSXRExtensibleManagabilityService.GetModelsInput.MODLE_REQUEST_TYPE
	41, // 11: IOSXRExtensibleManagabilityService.GetModelsOutput.models:type_name -> IOSXRExtensibleManagabilityService.GetModelsOutput.ModelInfo
	1,  // 12: IOSXRExtensibleManagabilityService.GetModelsOutput.responseCode:type_name -> IOSXRExtensibleManagabilityService.OC_RPC_RESPONSE_TYPE
	2,  // 13: IOSXRExtensibleManagabilityService.GetModelsOutput.ModelInfo.modelType:type_name -> IOSXRExtensibleManagabilityService.GET_MODEL_TYPE
	6,  // 14: IOSXRExtensibleManagabilityService.gRPCConfigOper.GetConfig:input_type -> IOSXRExtensibleManagabilityService.ConfigGetArgs
	10, // 15: IOSXRExtensibleManagabilityService.gRPCConfigOper.MergeConfig:input_type -> IOSXRExtensibleManagabilityService.ConfigArgs
	10, // 16: IOSXRExtensibleManagabilityService.gRPCConfigOper.DeleteConfig:input_type -> IOSXRExtensibleManagabilityService.ConfigArgs
	10, // 17: IOSXRExtensibleManagabilityService.gRPCConfigOper.RemoveConfig:input_type -> IOSXRExtensibleManagabilityService.ConfigArgs
	10, // 18: IOSXRExtensibleManagabilityService.gRPCConfigOper.ReplaceConfig:input_type -> IOSXRExtensibleManagabilityService.ConfigArgs
	12, // 19: IOSXRExtensibleManagabilityService.gRPCConfigOper.CliConfig:input_type -> IOSXRExtensibleManagabilityService.CliConfigArgs
	14, // 20: IOSXRExtensibleManagabilityService.gRPCConfigOper.CommitReplace:input_type -> IOSXRExtensibleManagabilityService.CommitReplaceArgs
	17, // 21: IOSXRExtensibleManagabilityService.gRPCConfigOper.CommitConfig:input_type -> IOSXRExtensibleManagabilityService.CommitArgs
	19, // 22: IOSXRExtensibleManagabilityService.gRPCConfigOper.ConfigDiscardChanges:input_type -> IOSXRExtensibleManagabilityService.DiscardChangesArgs
	8,  // 23: IOSXRExtensibleManagabilityService.gRPCConfigOper.GetOper:input_type -> IOSXRExtensibleManagabilityService.GetOperArgs
	25, // 24: IOSXRExtensibleManagabilityService.gRPCConfigOper.CreateSubs:input_type -> IOSXRExtensibleManagabilityService.CreateSubsArgs
	39, // 25: IOSXRExtensibleManagabilityService.gRPCConfigOper.GetProtoFile:input_type -> IOSXRExtensibleManagabilityService.GetProtoFileArgs
	21, // 26: IOSXRExtensibleManagabilityService.gRPCExec.ShowCmdTextOutput:input_type -> IOSXRExtensibleManagabilityService.ShowCmdArgs
	21, // 27: IOSXRExtensibleManagabilityService.gRPCExec.ShowCmdJSONOutput:input_type -> IOSXRExtensibleManagabilityService.ShowCmdArgs
	26, // 28: IOSXRExtensibleManagabilityService.gRPCExec.ActionJSON:input_type -> IOSXRExtensibleManagabilityService.ActionJSONArgs
	29, // 29: IOSXRExtensibleManagabilityService.OpenConfiggRPC.SubscribeTelemetry:input_type -> IOSXRExtensibleManagabilityService.SubscribeRequest
	36, // 30: IOSXRExtensibleManagabilityService.OpenConfiggRPC.UnSubscribeTelemetry:input_type -> IOSXRExtensibleManagabilityService.CancelSubscribeReq
	37, // 31: IOSXRExtensibleManagabilityService.OpenConfiggRPC.GetModels:input_type -> IOSXRExtensibleManagabilityService.GetModelsInput
	7,  // 32: IOSXRExtensibleManagabilityService.gRPCConfigOper.GetConfig:output_type -> IOSXRExtensibleManagabilityService.ConfigGetReply
	11, // 33: IOSXRExtensibleManagabilityService.gRPCConfigOper.MergeConfig:output_type -> IOSXRExtensibleManagabilityService.ConfigReply
	11, // 34: IOSXRExtensibleManagabilityService.gRPCConfigOper.DeleteConfig:output_type -> IOSXRExtensibleManagabilityService.ConfigReply
	11, // 35: IOSXRExtensibleManagabilityService.gRPCConfigOper.RemoveConfig:output_type -> IOSXRExtensibleManagabilityService.ConfigReply
	11, // 36: IOSXRExtensibleManagabilityService.gRPCConfigOper.ReplaceConfig:output_type -> IOSXRExtensibleManagabilityService.ConfigReply
	13, // 37: IOSXRExtensibleManagabilityService.gRPCConfigOper.CliConfig:output_type -> IOSXRExtensibleManagabilityService.CliConfigReply
	15, // 38: IOSXRExtensibleManagabilityService.gRPCConfigOper.CommitReplace:output_type -> IOSXRExtensibleManagabilityService.CommitReplaceReply
	18, // 39: IOSXRExtensibleManagabilityService.gRPCConfigOper.CommitConfig:output_type -> IOSXRExtensibleManagabilityService.CommitReply
	20, // 40: IOSXRExtensibleManagabilityService.gRPCConfigOper.ConfigDiscardChanges:output_type -> IOSXRExtensibleManagabilityService.DiscardChangesReply
	9,  // 41: IOSXRExtensibleManagabilityService.gRPCConfigOper.GetOper:output_type -> IOSXRExtensibleManagabilityService.GetOperReply
	28, // 42: IOSXRExtensibleManagabilityService.gRPCConfigOper.CreateSubs:output_type -> IOSXRExtensibleManagabilityService.CreateSubsReply
	40, // 43: IOSXRExtensibleManagabilityService.gRPCConfigOper.GetProtoFile:output_type -> IOSXRExtensibleManagabilityService.GetProtoFileReply
	22, // 44: IOSXRExtensibleManagabilityService.gRPCExec.ShowCmdTextOutput:output_type -> IOSXRExtensibleManagabilityService.ShowCmdTextReply
	23, // 45: IOSXRExtensibleManagabilityService.gRPCExec.ShowCmdJSONOutput:output_type -> IOSXRExtensibleManagabilityService.ShowCmdJSONReply
	27, // 46: IOSXRExtensibleManagabilityService.gRPCExec.ActionJSON:output_type -> IOSXRExtensibleManagabilityService.ActionJSONReply
	35, // 47: IOSXRExtensibleManagabilityService.OpenConfiggRPC.SubscribeTelemetry:output_type -> IOSXRExtensibleManagabilityService.SubscribeResponse
	35, // 48: IOSXRExtensibleManagabilityService.OpenConfiggRPC.UnSubscribeTelemetry:output_type -> IOSXRExtensibleManagabilityService.SubscribeResponse
	38, // 49: IOSXRExtensibleManagabilityService.OpenConfiggRPC.GetModels:output_type -> IOSXRExtensibleManagabilityService.GetModelsOutput
	32, // [32:50] is the sub-list for method output_type
	14, // [14:32] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_ems_grpc_proto_init() }
func file_ems_grpc_proto_init() {
	if File_ems_grpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ems_grpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigGetArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigGetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOperArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOperReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CliConfigArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CliConfigReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitReplaceArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitReplaceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscardChangesArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscardChangesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowCmdArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowCmdTextReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowCmdJSONReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QOSMarking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubsArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionJSONArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionJSONReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryStreamDestination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelSubscribeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModelsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModelsOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProtoFileArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProtoFileReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ems_grpc_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModelsOutput_ModelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ems_grpc_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*SubscribeRequest_Subscribe)(nil),
	}
	file_ems_grpc_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*SubscribeResponse_Update)(nil),
		(*SubscribeResponse_Status)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ems_grpc_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_ems_grpc_proto_goTypes,
		DependencyIndexes: file_ems_grpc_proto_depIdxs,
		EnumInfos:         file_ems_grpc_proto_enumTypes,
		MessageInfos:      file_ems_grpc_proto_msgTypes,
	}.Build()
	File_ems_grpc_proto = out.File
	file_ems_grpc_proto_rawDesc = nil
	file_ems_grpc_proto_goTypes = nil
	file_ems_grpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GRPCConfigOperClient is the client API for GRPCConfigOper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GRPCConfigOperClient interface {
	GetConfig(ctx context.Context, in *ConfigGetArgs, opts ...grpc.CallOption) (GRPCConfigOper_GetConfigClient, error)
	MergeConfig(ctx context.Context, in *ConfigArgs, opts ...grpc.CallOption) (*ConfigReply, error)
	DeleteConfig(ctx context.Context, in *ConfigArgs, opts ...grpc.CallOption) (*ConfigReply, error)
	RemoveConfig(ctx context.Context, in *ConfigArgs, opts ...grpc.CallOption) (*ConfigReply, error)
	ReplaceConfig(ctx context.Context, in *ConfigArgs, opts ...grpc.CallOption) (*ConfigReply, error)
	CliConfig(ctx context.Context, in *CliConfigArgs, opts ...grpc.CallOption) (*CliConfigReply, error)
	CommitReplace(ctx context.Context, in *CommitReplaceArgs, opts ...grpc.CallOption) (*CommitReplaceReply, error)
	// Do we need implicit or explicit commit
	//
	CommitConfig(ctx context.Context, in *CommitArgs, opts ...grpc.CallOption) (*CommitReply, error)
	ConfigDiscardChanges(ctx context.Context, in *DiscardChangesArgs, opts ...grpc.CallOption) (*DiscardChangesReply, error)
	// Get only returns oper data
	//
	GetOper(ctx context.Context, in *GetOperArgs, opts ...grpc.CallOption) (GRPCConfigOper_GetOperClient, error)
	// Get Telemetry Data
	CreateSubs(ctx context.Context, in *CreateSubsArgs, opts ...grpc.CallOption) (GRPCConfigOper_CreateSubsClient, error)
	// Get Proto File
	GetProtoFile(ctx context.Context, in *GetProtoFileArgs, opts ...grpc.CallOption) (GRPCConfigOper_GetProtoFileClient, error)
}

type gRPCConfigOperClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCConfigOperClient(cc grpc.ClientConnInterface) GRPCConfigOperClient {
	return &gRPCConfigOperClient{cc}
}

func (c *gRPCConfigOperClient) GetConfig(ctx context.Context, in *ConfigGetArgs, opts ...grpc.CallOption) (GRPCConfigOper_GetConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GRPCConfigOper_serviceDesc.Streams[0], "/IOSXRExtensibleManagabilityService.gRPCConfigOper/GetConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCConfigOperGetConfigClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPCConfigOper_GetConfigClient interface {
	Recv() (*ConfigGetReply, error)
	grpc.ClientStream
}

type gRPCConfigOperGetConfigClient struct {
	grpc.ClientStream
}

func (x *gRPCConfigOperGetConfigClient) Recv() (*ConfigGetReply, error) {
	m := new(ConfigGetReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRPCConfigOperClient) MergeConfig(ctx context.Context, in *ConfigArgs, opts ...grpc.CallOption) (*ConfigReply, error) {
	out := new(ConfigReply)
	err := c.cc.Invoke(ctx, "/IOSXRExtensibleManagabilityService.gRPCConfigOper/MergeConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCConfigOperClient) DeleteConfig(ctx context.Context, in *ConfigArgs, opts ...grpc.CallOption) (*ConfigReply, error) {
	out := new(ConfigReply)
	err := c.cc.Invoke(ctx, "/IOSXRExtensibleManagabilityService.gRPCConfigOper/DeleteConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCConfigOperClient) RemoveConfig(ctx context.Context, in *ConfigArgs, opts ...grpc.CallOption) (*ConfigReply, error) {
	out := new(ConfigReply)
	err := c.cc.Invoke(ctx, "/IOSXRExtensibleManagabilityService.gRPCConfigOper/RemoveConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCConfigOperClient) ReplaceConfig(ctx context.Context, in *ConfigArgs, opts ...grpc.CallOption) (*ConfigReply, error) {
	out := new(ConfigReply)
	err := c.cc.Invoke(ctx, "/IOSXRExtensibleManagabilityService.gRPCConfigOper/ReplaceConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCConfigOperClient) CliConfig(ctx context.Context, in *CliConfigArgs, opts ...grpc.CallOption) (*CliConfigReply, error) {
	out := new(CliConfigReply)
	err := c.cc.Invoke(ctx, "/IOSXRExtensibleManagabilityService.gRPCConfigOper/CliConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCConfigOperClient) CommitReplace(ctx context.Context, in *CommitReplaceArgs, opts ...grpc.CallOption) (*CommitReplaceReply, error) {
	out := new(CommitReplaceReply)
	err := c.cc.Invoke(ctx, "/IOSXRExtensibleManagabilityService.gRPCConfigOper/CommitReplace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCConfigOperClient) CommitConfig(ctx context.Context, in *CommitArgs, opts ...grpc.CallOption) (*CommitReply, error) {
	out := new(CommitReply)
	err := c.cc.Invoke(ctx, "/IOSXRExtensibleManagabilityService.gRPCConfigOper/CommitConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCConfigOperClient) ConfigDiscardChanges(ctx context.Context, in *DiscardChangesArgs, opts ...grpc.CallOption) (*DiscardChangesReply, error) {
	out := new(DiscardChangesReply)
	err := c.cc.Invoke(ctx, "/IOSXRExtensibleManagabilityService.gRPCConfigOper/ConfigDiscardChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCConfigOperClient) GetOper(ctx context.Context, in *GetOperArgs, opts ...grpc.CallOption) (GRPCConfigOper_GetOperClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GRPCConfigOper_serviceDesc.Streams[1], "/IOSXRExtensibleManagabilityService.gRPCConfigOper/GetOper", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCConfigOperGetOperClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPCConfigOper_GetOperClient interface {
	Recv() (*GetOperReply, error)
	grpc.ClientStream
}

type gRPCConfigOperGetOperClient struct {
	grpc.ClientStream
}

func (x *gRPCConfigOperGetOperClient) Recv() (*GetOperReply, error) {
	m := new(GetOperReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRPCConfigOperClient) CreateSubs(ctx context.Context, in *CreateSubsArgs, opts ...grpc.CallOption) (GRPCConfigOper_CreateSubsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GRPCConfigOper_serviceDesc.Streams[2], "/IOSXRExtensibleManagabilityService.gRPCConfigOper/CreateSubs", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCConfigOperCreateSubsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPCConfigOper_CreateSubsClient interface {
	Recv() (*CreateSubsReply, error)
	grpc.ClientStream
}

type gRPCConfigOperCreateSubsClient struct {
	grpc.ClientStream
}

func (x *gRPCConfigOperCreateSubsClient) Recv() (*CreateSubsReply, error) {
	m := new(CreateSubsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRPCConfigOperClient) GetProtoFile(ctx context.Context, in *GetProtoFileArgs, opts ...grpc.CallOption) (GRPCConfigOper_GetProtoFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GRPCConfigOper_serviceDesc.Streams[3], "/IOSXRExtensibleManagabilityService.gRPCConfigOper/GetProtoFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCConfigOperGetProtoFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPCConfigOper_GetProtoFileClient interface {
	Recv() (*GetProtoFileReply, error)
	grpc.ClientStream
}

type gRPCConfigOperGetProtoFileClient struct {
	grpc.ClientStream
}

func (x *gRPCConfigOperGetProtoFileClient) Recv() (*GetProtoFileReply, error) {
	m := new(GetProtoFileReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GRPCConfigOperServer is the server API for GRPCConfigOper service.
type GRPCConfigOperServer interface {
	GetConfig(*ConfigGetArgs, GRPCConfigOper_GetConfigServer) error
	MergeConfig(context.Context, *ConfigArgs) (*ConfigReply, error)
	DeleteConfig(context.Context, *ConfigArgs) (*ConfigReply, error)
	RemoveConfig(context.Context, *ConfigArgs) (*ConfigReply, error)
	ReplaceConfig(context.Context, *ConfigArgs) (*ConfigReply, error)
	CliConfig(context.Context, *CliConfigArgs) (*CliConfigReply, error)
	CommitReplace(context.Context, *CommitReplaceArgs) (*CommitReplaceReply, error)
	// Do we need implicit or explicit commit
	//
	CommitConfig(context.Context, *CommitArgs) (*CommitReply, error)
	ConfigDiscardChanges(context.Context, *DiscardChangesArgs) (*DiscardChangesReply, error)
	// Get only returns oper data
	//
	GetOper(*GetOperArgs, GRPCConfigOper_GetOperServer) error
	// Get Telemetry Data
	CreateSubs(*CreateSubsArgs, GRPCConfigOper_CreateSubsServer) error
	// Get Proto File
	GetProtoFile(*GetProtoFileArgs, GRPCConfigOper_GetProtoFileServer) error
}

// UnimplementedGRPCConfigOperServer can be embedded to have forward compatible implementations.
type UnimplementedGRPCConfigOperServer struct {
}

func (*UnimplementedGRPCConfigOperServer) GetConfig(*ConfigGetArgs, GRPCConfigOper_GetConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (*UnimplementedGRPCConfigOperServer) MergeConfig(context.Context, *ConfigArgs) (*ConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeConfig not implemented")
}
func (*UnimplementedGRPCConfigOperServer) DeleteConfig(context.Context, *ConfigArgs) (*ConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfig not implemented")
}
func (*UnimplementedGRPCConfigOperServer) RemoveConfig(context.Context, *ConfigArgs) (*ConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveConfig not implemented")
}
func (*UnimplementedGRPCConfigOperServer) ReplaceConfig(context.Context, *ConfigArgs) (*ConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceConfig not implemented")
}
func (*UnimplementedGRPCConfigOperServer) CliConfig(context.Context, *CliConfigArgs) (*CliConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CliConfig not implemented")
}
func (*UnimplementedGRPCConfigOperServer) CommitReplace(context.Context, *CommitReplaceArgs) (*CommitReplaceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitReplace not implemented")
}
func (*UnimplementedGRPCConfigOperServer) CommitConfig(context.Context, *CommitArgs) (*CommitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitConfig not implemented")
}
func (*UnimplementedGRPCConfigOperServer) ConfigDiscardChanges(context.Context, *DiscardChangesArgs) (*DiscardChangesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigDiscardChanges not implemented")
}
func (*UnimplementedGRPCConfigOperServer) GetOper(*GetOperArgs, GRPCConfigOper_GetOperServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOper not implemented")
}
func (*UnimplementedGRPCConfigOperServer) CreateSubs(*CreateSubsArgs, GRPCConfigOper_CreateSubsServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateSubs not implemented")
}
func (*UnimplementedGRPCConfigOperServer) GetProtoFile(*GetProtoFileArgs, GRPCConfigOper_GetProtoFileServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProtoFile not implemented")
}

func RegisterGRPCConfigOperServer(s *grpc.Server, srv GRPCConfigOperServer) {
	s.RegisterService(&_GRPCConfigOper_serviceDesc, srv)
}

func _GRPCConfigOper_GetConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigGetArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCConfigOperServer).GetConfig(m, &gRPCConfigOperGetConfigServer{stream})
}

type GRPCConfigOper_GetConfigServer interface {
	Send(*ConfigGetReply) error
	grpc.ServerStream
}

type gRPCConfigOperGetConfigServer struct {
	grpc.ServerStream
}

func (x *gRPCConfigOperGetConfigServer) Send(m *ConfigGetReply) error {
	return x.ServerStream.SendMsg(m)
}

func _GRPCConfigOper_MergeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCConfigOperServer).MergeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IOSXRExtensibleManagabilityService.gRPCConfigOper/MergeConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCConfigOperServer).MergeConfig(ctx, req.(*ConfigArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCConfigOper_DeleteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCConfigOperServer).DeleteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IOSXRExtensibleManagabilityService.gRPCConfigOper/DeleteConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCConfigOperServer).DeleteConfig(ctx, req.(*ConfigArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCConfigOper_RemoveConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCConfigOperServer).RemoveConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IOSXRExtensibleManagabilityService.gRPCConfigOper/RemoveConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCConfigOperServer).RemoveConfig(ctx, req.(*ConfigArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCConfigOper_ReplaceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCConfigOperServer).ReplaceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IOSXRExtensibleManagabilityService.gRPCConfigOper/ReplaceConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCConfigOperServer).ReplaceConfig(ctx, req.(*ConfigArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCConfigOper_CliConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CliConfigArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCConfigOperServer).CliConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IOSXRExtensibleManagabilityService.gRPCConfigOper/CliConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCConfigOperServer).CliConfig(ctx, req.(*CliConfigArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCConfigOper_CommitReplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitReplaceArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCConfigOperServer).CommitReplace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IOSXRExtensibleManagabilityService.gRPCConfigOper/CommitReplace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCConfigOperServer).CommitReplace(ctx, req.(*CommitReplaceArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCConfigOper_CommitConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCConfigOperServer).CommitConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IOSXRExtensibleManagabilityService.gRPCConfigOper/CommitConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCConfigOperServer).CommitConfig(ctx, req.(*CommitArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCConfigOper_ConfigDiscardChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscardChangesArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCConfigOperServer).ConfigDiscardChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IOSXRExtensibleManagabilityService.gRPCConfigOper/ConfigDiscardChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCConfigOperServer).ConfigDiscardChanges(ctx, req.(*DiscardChangesArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCConfigOper_GetOper_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetOperArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCConfigOperServer).GetOper(m, &gRPCConfigOperGetOperServer{stream})
}

type GRPCConfigOper_GetOperServer interface {
	Send(*GetOperReply) error
	grpc.ServerStream
}

type gRPCConfigOperGetOperServer struct {
	grpc.ServerStream
}

func (x *gRPCConfigOperGetOperServer) Send(m *GetOperReply) error {
	return x.ServerStream.SendMsg(m)
}

func _GRPCConfigOper_CreateSubs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateSubsArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCConfigOperServer).CreateSubs(m, &gRPCConfigOperCreateSubsServer{stream})
}

type GRPCConfigOper_CreateSubsServer interface {
	Send(*CreateSubsReply) error
	grpc.ServerStream
}

type gRPCConfigOperCreateSubsServer struct {
	grpc.ServerStream
}

func (x *gRPCConfigOperCreateSubsServer) Send(m *CreateSubsReply) error {
	return x.ServerStream.SendMsg(m)
}

func _GRPCConfigOper_GetProtoFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetProtoFileArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCConfigOperServer).GetProtoFile(m, &gRPCConfigOperGetProtoFileServer{stream})
}

type GRPCConfigOper_GetProtoFileServer interface {
	Send(*GetProtoFileReply) error
	grpc.ServerStream
}

type gRPCConfigOperGetProtoFileServer struct {
	grpc.ServerStream
}

func (x *gRPCConfigOperGetProtoFileServer) Send(m *GetProtoFileReply) error {
	return x.ServerStream.SendMsg(m)
}

var _GRPCConfigOper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "IOSXRExtensibleManagabilityService.gRPCConfigOper",
	HandlerType: (*GRPCConfigOperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MergeConfig",
			Handler:    _GRPCConfigOper_MergeConfig_Handler,
		},
		{
			MethodName: "DeleteConfig",
			Handler:    _GRPCConfigOper_DeleteConfig_Handler,
		},
		{
			MethodName: "RemoveConfig",
			Handler:    _GRPCConfigOper_RemoveConfig_Handler,
		},
		{
			MethodName: "ReplaceConfig",
			Handler:    _GRPCConfigOper_ReplaceConfig_Handler,
		},
		{
			MethodName: "CliConfig",
			Handler:    _GRPCConfigOper_CliConfig_Handler,
		},
		{
			MethodName: "CommitReplace",
			Handler:    _GRPCConfigOper_CommitReplace_Handler,
		},
		{
			MethodName: "CommitConfig",
			Handler:    _GRPCConfigOper_CommitConfig_Handler,
		},
		{
			MethodName: "ConfigDiscardChanges",
			Handler:    _GRPCConfigOper_ConfigDiscardChanges_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetConfig",
			Handler:       _GRPCConfigOper_GetConfig_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetOper",
			Handler:       _GRPCConfigOper_GetOper_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateSubs",
			Handler:       _GRPCConfigOper_CreateSubs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetProtoFile",
			Handler:       _GRPCConfigOper_GetProtoFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ems_grpc.proto",
}

// GRPCExecClient is the client API for GRPCExec service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GRPCExecClient interface {
	// Exec commands
	ShowCmdTextOutput(ctx context.Context, in *ShowCmdArgs, opts ...grpc.CallOption) (GRPCExec_ShowCmdTextOutputClient, error)
	ShowCmdJSONOutput(ctx context.Context, in *ShowCmdArgs, opts ...grpc.CallOption) (GRPCExec_ShowCmdJSONOutputClient, error)
	ActionJSON(ctx context.Context, in *ActionJSONArgs, opts ...grpc.CallOption) (GRPCExec_ActionJSONClient, error)
}

type gRPCExecClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCExecClient(cc grpc.ClientConnInterface) GRPCExecClient {
	return &gRPCExecClient{cc}
}

func (c *gRPCExecClient) ShowCmdTextOutput(ctx context.Context, in *ShowCmdArgs, opts ...grpc.CallOption) (GRPCExec_ShowCmdTextOutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GRPCExec_serviceDesc.Streams[0], "/IOSXRExtensibleManagabilityService.gRPCExec/ShowCmdTextOutput", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCExecShowCmdTextOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPCExec_ShowCmdTextOutputClient interface {
	Recv() (*ShowCmdTextReply, error)
	grpc.ClientStream
}

type gRPCExecShowCmdTextOutputClient struct {
	grpc.ClientStream
}

func (x *gRPCExecShowCmdTextOutputClient) Recv() (*ShowCmdTextReply, error) {
	m := new(ShowCmdTextReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRPCExecClient) ShowCmdJSONOutput(ctx context.Context, in *ShowCmdArgs, opts ...grpc.CallOption) (GRPCExec_ShowCmdJSONOutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GRPCExec_serviceDesc.Streams[1], "/IOSXRExtensibleManagabilityService.gRPCExec/ShowCmdJSONOutput", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCExecShowCmdJSONOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPCExec_ShowCmdJSONOutputClient interface {
	Recv() (*ShowCmdJSONReply, error)
	grpc.ClientStream
}

type gRPCExecShowCmdJSONOutputClient struct {
	grpc.ClientStream
}

func (x *gRPCExecShowCmdJSONOutputClient) Recv() (*ShowCmdJSONReply, error) {
	m := new(ShowCmdJSONReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRPCExecClient) ActionJSON(ctx context.Context, in *ActionJSONArgs, opts ...grpc.CallOption) (GRPCExec_ActionJSONClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GRPCExec_serviceDesc.Streams[2], "/IOSXRExtensibleManagabilityService.gRPCExec/ActionJSON", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCExecActionJSONClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPCExec_ActionJSONClient interface {
	Recv() (*ActionJSONReply, error)
	grpc.ClientStream
}

type gRPCExecActionJSONClient struct {
	grpc.ClientStream
}

func (x *gRPCExecActionJSONClient) Recv() (*ActionJSONReply, error) {
	m := new(ActionJSONReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GRPCExecServer is the server API for GRPCExec service.
type GRPCExecServer interface {
	// Exec commands
	ShowCmdTextOutput(*ShowCmdArgs, GRPCExec_ShowCmdTextOutputServer) error
	ShowCmdJSONOutput(*ShowCmdArgs, GRPCExec_ShowCmdJSONOutputServer) error
	ActionJSON(*ActionJSONArgs, GRPCExec_ActionJSONServer) error
}

// UnimplementedGRPCExecServer can be embedded to have forward compatible implementations.
type UnimplementedGRPCExecServer struct {
}

func (*UnimplementedGRPCExecServer) ShowCmdTextOutput(*ShowCmdArgs, GRPCExec_ShowCmdTextOutputServer) error {
	return status.Errorf(codes.Unimplemented, "method ShowCmdTextOutput not implemented")
}
func (*UnimplementedGRPCExecServer) ShowCmdJSONOutput(*ShowCmdArgs, GRPCExec_ShowCmdJSONOutputServer) error {
	return status.Errorf(codes.Unimplemented, "method ShowCmdJSONOutput not implemented")
}
func (*UnimplementedGRPCExecServer) ActionJSON(*ActionJSONArgs, GRPCExec_ActionJSONServer) error {
	return status.Errorf(codes.Unimplemented, "method ActionJSON not implemented")
}

func RegisterGRPCExecServer(s *grpc.Server, srv GRPCExecServer) {
	s.RegisterService(&_GRPCExec_serviceDesc, srv)
}

func _GRPCExec_ShowCmdTextOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ShowCmdArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCExecServer).ShowCmdTextOutput(m, &gRPCExecShowCmdTextOutputServer{stream})
}

type GRPCExec_ShowCmdTextOutputServer interface {
	Send(*ShowCmdTextReply) error
	grpc.ServerStream
}

type gRPCExecShowCmdTextOutputServer struct {
	grpc.ServerStream
}

func (x *gRPCExecShowCmdTextOutputServer) Send(m *ShowCmdTextReply) error {
	return x.ServerStream.SendMsg(m)
}

func _GRPCExec_ShowCmdJSONOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ShowCmdArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCExecServer).ShowCmdJSONOutput(m, &gRPCExecShowCmdJSONOutputServer{stream})
}

type GRPCExec_ShowCmdJSONOutputServer interface {
	Send(*ShowCmdJSONReply) error
	grpc.ServerStream
}

type gRPCExecShowCmdJSONOutputServer struct {
	grpc.ServerStream
}

func (x *gRPCExecShowCmdJSONOutputServer) Send(m *ShowCmdJSONReply) error {
	return x.ServerStream.SendMsg(m)
}

func _GRPCExec_ActionJSON_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionJSONArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCExecServer).ActionJSON(m, &gRPCExecActionJSONServer{stream})
}

type GRPCExec_ActionJSONServer interface {
	Send(*ActionJSONReply) error
	grpc.ServerStream
}

type gRPCExecActionJSONServer struct {
	grpc.ServerStream
}

func (x *gRPCExecActionJSONServer) Send(m *ActionJSONReply) error {
	return x.ServerStream.SendMsg(m)
}

var _GRPCExec_serviceDesc = grpc.ServiceDesc{
	ServiceName: "IOSXRExtensibleManagabilityService.gRPCExec",
	HandlerType: (*GRPCExecServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowCmdTextOutput",
			Handler:       _GRPCExec_ShowCmdTextOutput_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ShowCmdJSONOutput",
			Handler:       _GRPCExec_ShowCmdJSONOutput_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ActionJSON",
			Handler:       _GRPCExec_ActionJSON_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ems_grpc.proto",
}

// OpenConfiggRPCClient is the client API for OpenConfiggRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OpenConfiggRPCClient interface {
	SubscribeTelemetry(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (OpenConfiggRPC_SubscribeTelemetryClient, error)
	UnSubscribeTelemetry(ctx context.Context, in *CancelSubscribeReq, opts ...grpc.CallOption) (*SubscribeResponse, error)
	// get-models rpc implementation per
	// github.com/openconfig/public/blob/master/release/models/rpc/openconfig-rpc.yang
	GetModels(ctx context.Context, in *GetModelsInput, opts ...grpc.CallOption) (*GetModelsOutput, error)
}

type openConfiggRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenConfiggRPCClient(cc grpc.ClientConnInterface) OpenConfiggRPCClient {
	return &openConfiggRPCClient{cc}
}

func (c *openConfiggRPCClient) SubscribeTelemetry(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (OpenConfiggRPC_SubscribeTelemetryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OpenConfiggRPC_serviceDesc.Streams[0], "/IOSXRExtensibleManagabilityService.OpenConfiggRPC/SubscribeTelemetry", opts...)
	if err != nil {
		return nil, err
	}
	x := &openConfiggRPCSubscribeTelemetryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OpenConfiggRPC_SubscribeTelemetryClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type openConfiggRPCSubscribeTelemetryClient struct {
	grpc.ClientStream
}

func (x *openConfiggRPCSubscribeTelemetryClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *openConfiggRPCClient) UnSubscribeTelemetry(ctx context.Context, in *CancelSubscribeReq, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, "/IOSXRExtensibleManagabilityService.OpenConfiggRPC/UnSubscribeTelemetry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openConfiggRPCClient) GetModels(ctx context.Context, in *GetModelsInput, opts ...grpc.CallOption) (*GetModelsOutput, error) {
	out := new(GetModelsOutput)
	err := c.cc.Invoke(ctx, "/IOSXRExtensibleManagabilityService.OpenConfiggRPC/GetModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenConfiggRPCServer is the server API for OpenConfiggRPC service.
type OpenConfiggRPCServer interface {
	SubscribeTelemetry(*SubscribeRequest, OpenConfiggRPC_SubscribeTelemetryServer) error
	UnSubscribeTelemetry(context.Context, *CancelSubscribeReq) (*SubscribeResponse, error)
	// get-models rpc implementation per
	// github.com/openconfig/public/blob/master/release/models/rpc/openconfig-rpc.yang
	GetModels(context.Context, *GetModelsInput) (*GetModelsOutput, error)
}

// UnimplementedOpenConfiggRPCServer can be embedded to have forward compatible implementations.
type UnimplementedOpenConfiggRPCServer struct {
}

func (*UnimplementedOpenConfiggRPCServer) SubscribeTelemetry(*SubscribeRequest, OpenConfiggRPC_SubscribeTelemetryServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeTelemetry not implemented")
}
func (*UnimplementedOpenConfiggRPCServer) UnSubscribeTelemetry(context.Context, *CancelSubscribeReq) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnSubscribeTelemetry not implemented")
}
func (*UnimplementedOpenConfiggRPCServer) GetModels(context.Context, *GetModelsInput) (*GetModelsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModels not implemented")
}

func RegisterOpenConfiggRPCServer(s *grpc.Server, srv OpenConfiggRPCServer) {
	s.RegisterService(&_OpenConfiggRPC_serviceDesc, srv)
}

func _OpenConfiggRPC_SubscribeTelemetry_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OpenConfiggRPCServer).SubscribeTelemetry(m, &openConfiggRPCSubscribeTelemetryServer{stream})
}

type OpenConfiggRPC_SubscribeTelemetryServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type openConfiggRPCSubscribeTelemetryServer struct {
	grpc.ServerStream
}

func (x *openConfiggRPCSubscribeTelemetryServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OpenConfiggRPC_UnSubscribeTelemetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelSubscribeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenConfiggRPCServer).UnSubscribeTelemetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IOSXRExtensibleManagabilityService.OpenConfiggRPC/UnSubscribeTelemetry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenConfiggRPCServer).UnSubscribeTelemetry(ctx, req.(*CancelSubscribeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenConfiggRPC_GetModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenConfiggRPCServer).GetModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IOSXRExtensibleManagabilityService.OpenConfiggRPC/GetModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenConfiggRPCServer).GetModels(ctx, req.(*GetModelsInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _OpenConfiggRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "IOSXRExtensibleManagabilityService.OpenConfiggRPC",
	HandlerType: (*OpenConfiggRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnSubscribeTelemetry",
			Handler:    _OpenConfiggRPC_UnSubscribeTelemetry_Handler,
		},
		{
			MethodName: "GetModels",
			Handler:    _OpenConfiggRPC_GetModels_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeTelemetry",
			Handler:       _OpenConfiggRPC_SubscribeTelemetry_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ems_grpc.proto",
}
