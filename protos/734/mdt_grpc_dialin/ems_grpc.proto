syntax = "proto3";

package IOSXRExtensibleManagabilityService;

service gRPCConfigOper {

    // Configuration related commands

    rpc GetConfig(ConfigGetArgs) returns(stream ConfigGetReply) {};

    rpc MergeConfig(ConfigArgs) returns(ConfigReply) {};

    rpc DeleteConfig(ConfigArgs) returns(ConfigReply) {};

    rpc RemoveConfig(ConfigArgs) returns(ConfigReply) {};

    rpc ReplaceConfig(ConfigArgs) returns(ConfigReply) {};

    rpc CliConfig(CliConfigArgs) returns(CliConfigReply) {};

    rpc CommitReplace(CommitReplaceArgs) returns (CommitReplaceReply) {};

    // Do we need implicit or explicit commit
    //
    rpc CommitConfig(CommitArgs) returns(CommitReply) {};

    rpc ConfigDiscardChanges(DiscardChangesArgs) returns(DiscardChangesReply) {};

    // Get only returns oper data
    //
    rpc GetOper(GetOperArgs) returns(stream GetOperReply) {};
    // Do we need "Get" also to give combined oper and config?

    // Get Telemetry Data
    rpc CreateSubs(CreateSubsArgs) returns(stream CreateSubsReply) {};

    // Get Proto File
    rpc GetProtoFile(GetProtoFileArgs) returns(stream GetProtoFileReply) {};
}

//
// Should we seperate Exec from Config/Oper?
//

service gRPCExec {
// Exec commands
    rpc ShowCmdTextOutput(ShowCmdArgs) returns(stream ShowCmdTextReply) {};
    rpc ShowCmdJSONOutput(ShowCmdArgs) returns(stream ShowCmdJSONReply) {};
    rpc ActionJSON(ActionJSONArgs) returns(stream ActionJSONReply) {};
}

service OpenConfiggRPC {
    rpc SubscribeTelemetry(SubscribeRequest) returns (stream SubscribeResponse) {};
    rpc UnSubscribeTelemetry(CancelSubscribeReq) returns (SubscribeResponse) {};
    // get-models rpc implementation per
    // github.com/openconfig/public/blob/master/release/models/rpc/openconfig-rpc.yang
    rpc GetModels(GetModelsInput) returns (GetModelsOutput) {};
}

message ConfigGetArgs {
     int64 ReqId = 1;
     string yangpathjson = 2;
}

message ConfigGetReply {
    int64 ResReqId = 1;
    string yangjson = 2;
    string errors = 3;
}

message GetOperArgs {
     int64 ReqId = 1;
     string yangpathjson = 2;
}

message GetOperReply {
    int64 ResReqId = 1;
    string yangjson = 2;
    string errors = 3;
}

message ConfigArgs {
    int64 ReqId = 1;
    string yangjson = 2;
    bool   Confirmed = 3;
    uint32  ConfirmTimeout = 4;
}

message ConfigReply {
    int64 ResReqId = 1;
    string errors = 2;
    uint32 CommitID = 3;
}

message CliConfigArgs {
    int64 ReqId = 1;
    string cli = 2;
    bool Confirmed = 3;
    uint32 ConfirmTimeout = 4;
}

message CliConfigReply {
    int64 ResReqId = 1;
    string errors = 2;
    uint32 CommitID = 3;
}


message CommitReplaceArgs {
    int64 ReqId = 1;
    string cli = 2;
    string yangjson = 3;
}

message CommitReplaceReply {
    int64 ResReqId = 1;
    string errors = 2;
}

message CommitMsg {
    string label = 1;
    string comment = 2;
}

enum CommitResult {
    CHANGE = 0;
    NO_CHANGE = 1;
    FAIL = 2;
}

message CommitArgs {
    int64 ReqId = 1;
    uint32 CommitID = 2;
}

message CommitReply {
    int64 ResReqId = 1;
    string errors = 2;
}


message DiscardChangesArgs {
    int64 ReqId = 1;
}

message DiscardChangesReply {
    int64 ResReqId = 1;
    string errors = 2;
}


message ShowCmdArgs {
     int64 ReqId = 1;
     string cli = 2;
}

message ShowCmdTextReply {
    int64 ResReqId =1;
    string output = 2;
    string errors = 3;
}
message ShowCmdJSONReply {
    int64 ResReqId =1;
    string jsonoutput = 2;
    string errors = 3;
}

// QOSMarking specifies the DSCP value to be set on transmitted telemetry
message QOSMarking {
  uint32 marking = 1;
}

message CreateSubsArgs {
     int64 ReqId = 1;
     int64 encode = 2;
     string subidstr = 3;
     QOSMarking qos = 4;   // DSCP marking to be used.
     repeated string Subscriptions = 5;
}

message ActionJSONArgs {
	int64 ReqId = 1;
	string yangpathjson = 2;
}

message ActionJSONReply {
	int64 ResReqId = 1;
	string yangjson = 2;
	string errors = 3;
}

message CreateSubsReply {
    int64 ResReqId = 1;
    bytes data = 2;
    string errors = 3;
}

message SubscribeRequest {
    int64 ReqId = 1;
    oneof request {
        SubscriptionList subscribe = 2;
    }
}

message TelemetryStreamDestination {
    string destination_address = 1;
    uint32 destination_port = 2;
    enum TSP {
       TSP_TCP = 0;
       TSP_GRPC = 1;
    }
    TSP telemetry_stream_protocol = 3;
}

message TelemetryPath {
    string Path = 1;
}

message SubscriptionList {
    repeated TelemetryStreamDestination TelemetryStreamDestinations = 1;
    repeated TelemetryPath TelemetryPaths = 2;
    uint64 sample_interval = 3;
    enum ENC_SPEC {
       ENC_KV_GPB = 0;
       ENC_GPB = 1;
    }
    ENC_SPEC encoding = 4;
    QOSMarking qos = 5;   // DSCP marking to be used.
}
enum OC_RPC_RESPONSE_TYPE {
    OK = 0;
    NOK = 1;
    UNSUPPORTED_PATH = 2;
    INVALID_PATH = 3;
    INVALID_CONFIGURATION = 4;
    UNSUPPORTED_INTERVAL = 5;
    UNSUPPORTED_ENCODING = 6;
    INVALID_SUBSCRIPTION_ID = 7;
}

message StatusResponse {
    string message_json = 1;
    OC_RPC_RESPONSE_TYPE code = 2;
}

message Notification {
   bytes data = 1;
}

message SubscribeResponse {
    int64 ResReqId = 1;
    uint64 subscription_id = 2;
    oneof response {
        Notification update = 3;
        StatusResponse status = 4;
    }
}

message CancelSubscribeReq {
    int64 ReqId = 1;
    uint64 subscription_id = 2;
}

enum GET_MODEL_TYPE {
    MODULE       = 0;
    AUGMENTATION = 1;
    DEVIATION    = 2;
    BUNDLE       = 3;
}

message GetModelsInput {
    uint64  requestId   = 1;
    string  name        = 2;
    string  namespace   = 3;
    string  version     = 4;
    enum MODLE_REQUEST_TYPE {
        SUMMARY = 0;
        DETAIL  = 1;
    }
    MODLE_REQUEST_TYPE requestType = 5;
}

message GetModelsOutput {
    uint64  requestId   = 1;
    message ModelInfo {
        string  name        = 1;
        string  namespace   = 2;
        string  version     = 3;
        GET_MODEL_TYPE  modelType = 4;
        string modelData = 5;
    }
    repeated ModelInfo models = 2;
    OC_RPC_RESPONSE_TYPE responseCode = 3;
    string msg = 4;
}

message GetProtoFileArgs {
     int64  reqId = 1;
     string yangPath = 2;
}

message GetProtoFileReply {
    int64  reqId = 1;
    string protoContent = 2;
    string errors = 3;
}

